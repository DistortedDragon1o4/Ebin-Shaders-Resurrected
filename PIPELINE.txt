The following is a summary of how the pipeline for this shader operates. Specifically, it's a list of the outputs for each program. Some of this information may be out of date or incorrect, but I hope it helps you understand this mess.

===LPV STUFF===
The floodfill lighting uses two custom images - lightvoxel and lightvoxelf
On even frames, lightvoxelf is the 'previous buffer' and lightvoxel is the 'current buffer'. On odd frames, this is swapped.

In shadow.vsh, light emitting blocks have their emission colour written to the **previous buffer** at their voxel position from the **previous frame**.
In shadowcomp.csh, for each voxel, samples are taken from **where that voxel was last frame** from the **previous buffer**, and then written to the **current buffer**.

===PROGRAMS=== (not all of them)

GBUFFERS TERRAIN - JUST ALBEDO + DATA
1 solid diffuse
4 solid material ID, nothin', material AO, SSS, normal, lighting data
9 solid smoothness, f0, emission
10 nothing wtf
11 blocklight colour

GBUFFERS WATER - SHADED + DATA
0 transparent nothin', skylight, is water, normal
3 transparent diffuse
8 transparent smoothness, f0
13 transparent sunlight
11 blocklight colour

GBUFFERS TEXTURED - SHADED + DATA
0 transparent nothin', skylight, is water, normal
3 transparent diffuse
8 transparent smoothness, f0
13 transparent sunlight

COMPOSITE0 - GI, AO, VL
5 GI, AO
6 volumetrics

COMPOSITE1 - SOLID SHADING
1 solid composite (lit)
4 front material ID, nothin', front sky lighting
5 clouds
6 volumetrics (upscaled)
10 solid sunlight 

COMPOSITE2 - REFLECTIONS, SKY BLENDING, TRANSPARENT BLENDING
3 shaded colour
2 material ID

COMPOSITE3 - BLOOM
1 bloom

FINAL - FINAL SHADING
0 final data
